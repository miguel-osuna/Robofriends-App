{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","Components/ErrorBoundary.js","serviceWorker.js","index.js"],"names":["Card","props","console","log","id","name","email","className","src","alt","CardList","robots","map","user","username","SearchBox","searchChange","onChange","type","placeholder","Scroll","style","overflowY","border","height","children","App","Component","onSearchChange","event","setState","search_field","target","value","state","fetch","then","response","json","users","this","filtered_robots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAkBeA,EAhBF,SAAAC,GACXC,QAAQC,IAAIF,GADQ,IAEZG,EAAoBH,EAApBG,GAAIC,EAAgBJ,EAAhBI,KAAMC,EAAUL,EAAVK,MAClB,OACE,kBAAC,WAAD,KACE,yBAAKC,UAAU,sDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,UACpD,6BACE,4BAAKJ,GACL,2BAAIC,OCaCI,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAElB,OACE,kBAAC,WAAD,KACE,6BACGA,EAAOC,KAAI,SAAAC,GACV,OACE,kBAAC,EAAD,CACET,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,MACZQ,SAAUD,EAAKC,iBCGdC,EAhBG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,kBAAC,WAAD,KACE,yBAAKT,UAAU,OACb,2BAEEU,SAAUD,EACVT,UAAU,mCACVW,KAAK,SACLC,YAAY,sBCKPC,EAdA,SAAAnB,GACb,OACE,yBACEoB,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAGTvB,EAAMwB,WC6CEC,GCtDaC,Y,kBDM1B,aAAe,IAAD,8BAEZ,+CAaFC,eAAiB,SAAAC,GAEf,EAAKC,SAAS,CAAEC,aAAcF,EAAMG,OAAOC,SAd3C,EAAKC,MAAQ,CACXvB,OAAQ,GACRoB,aAAc,IALJ,E,iFASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEnB,OAAQ4B,S,+BAUjC,IAAD,EAC0BC,KAAKN,MAA9BvB,EADD,EACCA,OAAQoB,EADT,EACSA,aACVU,EAAkB9B,EAAO+B,QAAO,SAAAC,GACpC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAASd,EAAaa,kBAKxD,OAAQjC,EAAOmC,OAKb,kBAAC,WAAD,KACE,yBAAKvC,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWS,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUjB,OAAQ8B,OATxB,6BACE,wBAAIlC,UAAU,MAAd,8B,GAjCUoB,cEKEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,6BACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.87f88a33.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\n\nconst Card = props => {\n  console.log(props);\n  const { id, name, email } = props;\n  return (\n    <Fragment>\n      <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\"></img>\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Card;\n","import React, { Fragment } from \"react\";\nimport Card from \"./Card.js\";\n\n// Destructuring of props = { robots }\nconst CardList = ({ robots }) => {\n  // Card Component List\n  return (\n    <Fragment>\n      <div>\n        {robots.map(user => {\n          return (\n            <Card\n              id={user.id}\n              name={user.name}\n              email={user.email}\n              username={user.username}\n            />\n          );\n        })}\n      </div>\n    </Fragment>\n  );\n};\n\nexport default CardList;\n","import React, { Fragment } from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <Fragment>\n      <div className=\"pa2\">\n        <input\n          // Executes searchChange, which has the onSearchChange method from App class\n          onChange={searchChange}\n          className=\"pa3 ba b--black bg-lightest-blue\"\n          type=\"search\"\n          placeholder=\"Search a robot\"\n        ></input>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"2px solid white\",\n        height: \"70vh\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Fragment, Component } from \"react\";\nimport CardList from \"../Components/CardList.js\";\nimport SearchBox from \"../Components/SearchBox.js\";\nimport Scroll from \"../Components/Scroll.js\";\nimport ErrorBoundary from \"../Components/ErrorBoundary.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    // React.Component Constructor\n    super();\n    this.state = {\n      robots: [],\n      search_field: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  onSearchChange = event => {\n    // Adds the text input to search_field\n    this.setState({ search_field: event.target.value });\n\n    // Filters the robots object array with the search_field text input\n  };\n\n  render() {\n    const { robots, search_field } = this.state;\n    const filtered_robots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(search_field.toLowerCase());\n    });\n\n    // Changes the CardList of Robots Searched\n    // console.log(filtered_robots);\n    return !robots.length ? (\n      <div>\n        <h1 className=\"tc\"> Loading, please wait</h1>\n      </div>\n    ) : (\n      <Fragment>\n        <div className=\"tc\">\n          <h1 className=\"f1\"> Robofriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <CardList robots={filtered_robots} />\n          </Scroll>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hasError: false\n    };\n  }\n\n  // Adding the new Hook Method\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    const { hasError } = this.state;\n    return hasError ? <h1> Service not available </h1> : this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport App from \"./Containers/App.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}